# Stolen outright from @lyzadanger's prompt: https://github.com/lyzadanger/dotfiles
# Which was "heavily inspired" by @necolas’s prompt: https://github.com/necolas/dotfiles
# Then customized a bit based on Pure: https://github.com/sindresorhus/pure
# And Sexy Bash Prompt: https://github.com/twolfson/sexy-bash-prompt

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Dirty
			if [ -n "$(git status --porcelain 2> /dev/null)" ]; then
				s+='✱';
			fi;

			# Head is not detached
			if [ -n "$(git symbolic-ref --short -q HEAD)" ]; then
				# Has remote
				if [ $(git rev-parse --abrev-ref @'{u}' &>/dev/null; echo "${?}") == '0' ]; then

					# Upstream revisions
					if [ -n "$(git rev-list --right-only HEAD...@'{u}')" ]; then
						s+='⇣';
					fi;

					# Downstream revisions
					if [ -n "$(git rev-list --left-only HEAD...@'{u}')" ]; then
						s+='⇡';
					fi;

				fi;
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" ${s}";

		echo -e " ${1}on $(tput setaf 3)${branchName}$(tput setaf 9)${s}";
	else
		return;
	fi;
}

# Color    Normal  Bright
# -----------------------
# black    0        8
# red      1        9
# green    2       10
# yellow   3       11
# blue     4       12
# magenta  5       13
# cyan     6       14
# white    7       15

# reset    sgr0
# bold     bold (heh)

# Set the terminal title to the current working directory.
PS1="\[\033]0;\W\007\]";
PS1+="\n"; # newline
#PS1+="\[$(tput setaf 15)\]⚡ \[$(tput sgr0)\]"
PS1+="\[$(tput setaf 15)\]⚡︎ \[$(tput sgr0)\]"
PS1+="\[$(tput setaf 6)\]\w"; # working directory
PS1+="\[$(tput sgr0)\]\$(prompt_git)"; # Git repository details
PS1+="\n";
PS1+="\[$(tput setaf 5)\]→ \[$(tput sgr0)\]"; # Arrow (and reset color)
export PS1;
